            **** Rails ****


    1. Rails is an open source web framework that uses ruby programming language.

    2. Framework vs Library:  libraries target a specific functionality, while a framework tries to provide everything required to develop a complete application.

    3. Major principles of rails: - DRY (Don't Repeat Yourself) : Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.
                                  - Rails has opinions about the best way to do many things in a web application, and defaults to this set of conventions, rather than require that you specify minutiae through endless configuration files.

    4. MVC Architecture: MVC stands for Model View Controller Architecture. It helps in ensuring DRY principal is followed.

        - Model: Contains all the data related objects
        - View: Contains all the objects that will be shown to the user like html css js.
        - Controller: Contains all the code that will help in decision making process for a given request

        Working:
        - Request from browser will be sent too Controller for decision making
        - Controller will then ask the result of request from model which will be connected to the db 
        - then after recieving the result controller will show results to user using the View object.

    5. Create a new project: Command: rails new <application-name>

        To start the server : rails server

        by default this project is using sqlite3 db

        when we have to create a project using postgres as db command is:

        rails new <application-name> -d postgresql

        before starting the server we have to initialize the db which is done using the command:

        rake db:create

        then start the server using: rails server

    6. Most of the coding is done in the app folder(95%) followed by config dir, gem file(packages used by our project) and db dir(database related files like db migration).

    7. We have different files for production,development,test environment inside the config dir.

    8. Generate controller: Command : rails generate controller Demo[Controller-name] index[List of views]
        
        this command will generate a new controller in the controller folder of app and also a view inside view folder (demo/index)
        also in the config file we will have a route created in routes.rb file showing that demo controller is associated with index view

    9. Rails Architecture(MVC arch explained wrt reality): Browser sends request using a web server(eg: apache) to the application.
        Now application before sending the req to rail framework checks that whether the asked path is present insdie the public folder or not.
        if it is present then the req is returned through public folder only and if it is not then the req is sent to the rails framework.

        Any file inside public folder is visible for users.

    10. Routing: It helps in determining which controller to be called according to the request.
        In short helps in determining the routes. routes.rb has all the routes which is present in the config folder

        Types of routes:
            -simple match route
            -default route
            -root route
            -resourceful routes

        Simple match route: Syntax: get "demo/index"
                                    or
                                    match "demo/index", :to => "demo#index", :via => :get (this is useful when we have to keep diff path name than controller name and view name)

        Default route: Syntax: get ":controller(/:action(/:id))"
                               or
                               match ':controller(/:action(/:id))', :via => :get

        root route: Syntax: root "demo#index"
                            or
                            match "/", :to => "demo#index", :via => :get

    11. Rendering templates: the routes defined help in deciding the controller and action(method in controller).
        and then the template is rendered using default behaviour as Controller name as folder and action name as filename to choose the template.

        to render according to our own wish we may use render("path") inside the action
        Example:
            class DemoController < ApplicationController
            layout false

            def index
                render('demo/hello')
            end

            def hello
                render('demo/index')
            end
            end

    12. Redirect: When we recieve a request and controller instead of sending view as a response sends request to another controller 
        for eg: trying to access a page that rquires login without loggin in that will send user to login screen first

        Redirect changes the url link.    

        Example:
        class DemoController < ApplicationController
        def index
        end

        def hello
            redirect_to(controller:"demo",action:"index")
        end
        end

        hello action will redirect to index everytime

        We can also write : redirect_to(action:"index")
        if the controller is same

    13. What is erb?: Embedded ruby(used to write ruby code in html file)

        Syntax: <% code %> (it doesnot outputs the result on template)
                or
                <%= code %> (it outputs the result)

        Example:
        <h1>Index page</h1>

        <%= "printss 1" %>

        <br />

        <% set = "Hello" %>

        <%= "Hello #{set}" %>

        <% 3.times do |n| %>
            <p><%= n %></p>
        <% end %>

        Output:
        Index page
        printss 1
        Hello Hello
        0

        1

        2

    14. instance variables: start with @ and can be shared by the class and belong to one instance of the class
        Can be used in the templates(views)
        Example:
        <% @array.each do |n| %>
            <p><%= n %></p>
        <% end %>

    15. Links: use to navigate to another webpage. similar to anchor tag in html
        Syntax: <%= link_to("display name of link","path") %>
                or
                <%= link_to("display name of link",{:controller => name , :action => name}) %>

        Example:
        <h1>hello page</h1>

        <a href = "/demo/index"> index page 1</a>

        <br /> <br />

        <%= link_to("Index page 2",{:action => "index"}) %>

    16. URL Parameters: parameters are usually content that appears in the link after '?'
        params are stored in rails frame work in 'params' variable.

        Exmple:
        hello.html.erb file

        <%= link_to("Index page 2",{:action => "index" , :id => 30 , :page =>444}) %>

        index.html.erb file

        ID: <%= params['id'] %> 
        Page: <%= @page %>

        controller file

        class DemoController < ApplicationController
        def index
            @array = [1,2,3,4,5]
            @page = params['page']
        end

        def hello
            
            #redirect_to(controller:"demo",action:"index")
        end
        end

        We can access parameters from params var both by 'str' and :str way. and these params are stored as strings in rails

        17. Autoloading: Application classes and modules are available everywhere, you do not need and should not load anything under app with require. 
            require "application_controller" # DON'T DO THIS.

        18. Generating a model: A model is a Ruby class that is used to represent data. Additionally, models can interact with the application's database 
            through a feature of Rails called Active Record.

            Syntax: bin/rails generate model Article(model_name) title:string body:text(attributes)

1. 