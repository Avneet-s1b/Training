Git

Git is a version control system that allows to keep track of changes made. It is helpful for collaborative work, prevent losses from crash, rolling back etc.

    • Diff. Between git and github: Git is a version control system that allows developers to track changes in their code. GitHub is a web-based hosting service for git repositories. In simple terms, you can use git without Github, but you cannot use GitHub without Git.

    • Distributed Version Control: What this means is that git doesnot consider any repo a central repo, all repos are equal and they are their own version of that particular project. Though we have one master in git it is not included by git we just decide to call that branch a master so it acts as a central base where everyone will submit their changes.

    • Configure git files: Git configuration can be done in three ways:
        1. System wide: git config --system 
        2. For particular user: git config --global
        3. For particular project: git config

	    To edit user name and email : git config --global user.name "Avneet-s1b"
						              git config --global user.email “email”

		To setup editor: git config --global core.editor “atom –wait”
		To setup ui: git config --global color.ui true
		
        To view any config info: 
            Command: git config user.name

            Example: 
                Username
                Command: git config user.name
                Result: Avneet-s1b

                email 
                Command: git config user.email
                Result: avneet.bhatia@berylsystems.com

                editor
                Command: git config core.editor
                Result: nano

		We can also view .gitconfig folder using cat.
            Command: cat .gitconfig 
            Result: [user]
                        name = Avneet-s1b
                        email = avneet.bhatia@berylsystems.com
                    [core]
                        editor = nano
                    [color]
                        ui = true


    • For help :  git help
                  git help commandname
	              man git-commandname

    • Initialize a git repo: to initialize a git repo in a project go to the project directory and type git init.

    • Commit change: to commit chnages three steps are followed: make change, add change to repo, commit change.
              To add: git add filename 
              To commit: git commit -m “message”

            Example: 
                Command: git add .
                         git commit -m "Adds help command notes to GitNotes"
                
                Result: [main 5c42dea] Adds help command notes to GitNotes
                        1 file changed, 1 insertion(+)


    • Best practices for commit message:
            1. keep it short. (optionally followed by a blank line and then desc if req)
            2. use present tense, since it should tell the bug that this commit is going to fix.
            3. Add tracking id of the issue.
            4. Be clear and descriptive.


    • Git log: it is useful to check a repository’s history.
        Command: git log

        Example:
            Command: git log
            Result: commit 10d51a102940703f03d83899ac33c86f23e69ee3 (HEAD -> master)
                    Author: Avneet <avneet.bhatia@berylsystems.com>
                        Date:   Wed Oct 18 17:09:53 2023 +0530

                                Initial commit

            10d51a102940703f03d83899ac33c86f23e69ee3 => this no is the sha-1 value of the commit.
	
    Sha-1 value is generated using a check sum and this checksum is a value generated for each set of changes done. This checksum is then passed through a 	hashing algorithm.

	Sha-1 value’s checksum for each commit also contains hash value of prev commit so each commitis linked to previous similar to blockchain/.

	Options: 
		    Command: git log -n 5: useful to show most recent no of commits if commits are many.
            Result: commit 13d54feac85da466808faef58a3eecd7856172e8 (HEAD -> main, origin/main, origin/HEAD)
                    Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                    Date:   Wed Oct 25 12:06:27 2023 +0530

                        Adds Best Practice for commit message notes to GitNotes

                    commit dcbb96df693370a2b96eb52005eb9d193eef4518
                    Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                    Date:   Wed Oct 25 12:04:48 2023 +0530

                        Adds Initialize and commit commands notes to GitNotes

                    commit 5c42dea76cd736f55a4ca8992f59ab4e59087bdd
                    Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                    Date:   Wed Oct 25 11:59:18 2023 +0530

                        Adds help command notes to GitNotes

                    commit bebbe2caffaa0d08e240bf98be25318f52fd88af
                    Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                    Date:   Wed Oct 25 11:57:07 2023 +0530

                        Adds configuring git notes to GitNotes

                    commit 2e4e22b25a762c5eb2eecefa94864a9406b379e0
                    Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                    Date:   Wed Oct 25 11:40:20 2023 +0530

                        Creates GitNotes file


		Command: git log --since=2023-09-10:  useful to show logs from a particular date.
        Result: commit 13d54feac85da466808faef58a3eecd7856172e8 (HEAD -> main, origin/main, origin/HEAD)
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 12:06:27 2023 +0530

                    Adds Best Practice for commit message notes to GitNotes

                commit dcbb96df693370a2b96eb52005eb9d193eef4518
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 12:04:48 2023 +0530

                    Adds Initialize and commit commands notes to GitNotes

                commit 5c42dea76cd736f55a4ca8992f59ab4e59087bdd
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 11:59:18 2023 +0530

                Adds help command notes to GitNotes

                commit bebbe2caffaa0d08e240bf98be25318f52fd88af
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 11:57:07 2023 +0530

                    Adds configuring git notes to GitNotes

                commit 2e4e22b25a762c5eb2eecefa94864a9406b379e0
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 11:40:20 2023 +0530

                    Creates GitNotes file

                commit 7abf03fadbeb7286cd93a92e451dc230ea6748c5
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 11:36:49 2023 +0530

                    Starts Maintaining Proper Notes

                commit a443630a9374d67e10914688e6c6386fc67f0b9a
                :

		Command: git log --until=2023-09-10:  useful to show logs till a particular date.

		Command: git log --author=Avneet:  useful to show logs by a particular user.
        Result: commit 13d54feac85da466808faef58a3eecd7856172e8 (HEAD -> main, origin/main, origin/HEAD)
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 12:06:27 2023 +0530

                    Adds Best Practice for commit message notes to GitNotes

                commit dcbb96df693370a2b96eb52005eb9d193eef4518
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 12:04:48 2023 +0530

                    Adds Initialize and commit commands notes to GitNotes

                commit 5c42dea76cd736f55a4ca8992f59ab4e59087bdd
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 11:59:18 2023 +0530

                    Adds help command notes to GitNotes

                commit bebbe2caffaa0d08e240bf98be25318f52fd88af
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 11:57:07 2023 +0530

                    Adds configuring git notes to GitNotes

                commit 2e4e22b25a762c5eb2eecefa94864a9406b379e0
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 11:40:20 2023 +0530

                    Creates GitNotes file

                commit 7abf03fadbeb7286cd93a92e451dc230ea6748c5
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 11:36:49 2023 +0530

                    Starts Maintaining Proper Notes

                commit a443630a9374d67e10914688e6c6386fc67f0b9a
                beryl@beryl-HP-ProBook-6560b:~/Documents/Training$ 


		Command: git log --grep="Best":  useful to show particular logs.
        Result: Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 12:06:27 2023 +0530

                    Adds Best Practice for commit message notes to GitNotes

		Command: git log --oneline: gives all logs first line containging hash value and commit message.
        Result: 13d54fe (HEAD -> main, origin/main, origin/HEAD) Adds Best Practice for commit message notes to GitNotes
                dcbb96d Adds Initialize and commit commands notes to GitNotes
                5c42dea Adds help command notes to GitNotes
                bebbe2c Adds configuring git notes to GitNotes
                2e4e22b Creates GitNotes file
                7abf03f Starts Maintaining Proper Notes
                a443630 Adds Postgres Notes Starting
                9966757 Adds Linux notes odt file
                f859bc7 Readable Linux Notes Add
                ab3f3d2 Add Git notes
                db0274d Adds Linux Notes
                ee40834 Initial commit

    • Multi line commit message:  to give multi line commit message just do : 
        git commit this will open nano editor automatically as it has been set by us to 
        get opened whenever a commit messg is req. Remember commit mssg are imp without 
        them there will be no commit.

        Command: git commit 
        Result: commit 12ea1e022fc220b4ba0b86bccd9bd92ec287bee7 (HEAD -> main)
                Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                Date:   Wed Oct 25 12:26:04 2023 +0530

                    Adds multi line commit eg and three tier architecture
                    
                    This commit adds multi line commit example to notes and three tier architecture description too.




    Three Tree Architecture

					Repository(changes being tracked by git)
						|
					          v
					Staging area(changes about to be commited)
						|
					          v
					Working file(changes not being tracked by git)


    • Head pointer is used by git to tell the current position of where we are working.

    • git status: used to check status of the current project about what changes are being tracked and what not.

        Command: git status
        Example Outputs: If the changes have been made but not staged

        On branch master
        Untracked files:
        (use "git add <file>..." to include in what will be committed)

                    second_file.txt
                    third_file.txt

        nothing added to commit but untracked files present (use "git add" to track)

        If the changes have been made and staged but not committed.

        On branch master
        Changes to be committed:
        (use "git reset HEAD <file>..." to unstage)

            new file:   second_file.txt
            new file:   third_file.txt

        If the changes have been staged and committed too.
        
        On branch master
	    nothing to commit, working tree clean

    • git checkout: this is used to bring back file from repo in case of file loss.
              Command: git checkout -- filename 

              Example: 
                Command: git checkout --
                Result: M	Git/GitNotes.txt
                        Your branch is up to date with 'origin/main'.
 	        
              This -- in checkout is used too tell checkout that dont go looking on any 
              other branch we have to fetch the file from this current branch only.

    • git reset: this command is used to unstage the change.(if the changes were made to some file after being staged then this will not change the current file in working dir this will only unstage the file and current file condition will prevail).
                      
                      Command: git reset head filename

                      Example: git reset HEAD
                      Result: Unstaged changes after reset:
                              M	  Git/GitNotes.txt


	          If we stage some file then make changes to it after then there will be two diff 
              versions of our file one in staging area one in curr working tree and obv there will be one in git repo.


    • git diff: used to compare the changes in file between working directory and staging area.
          Command: git diff

          Example: 
          Command: git diff 
          Result:   diff --git a/demo.txt b/demo.txt
                    index 525a42e..1b6d18f 100644
                    --- a/demo.txt
                    +++ b/demo.txt
                    @@ -1,2 +1,3 @@
                    This is demo file.
                    - List : 1. apple
                    \ No newline at end of file
                    + List : 1. apple
                    +        2. banana
                    \ No newline at end of file

    • git diff --staged: used to compare changes between staging area and repo.
          Command: git diff --staged 

          Example: 
          Command: git diff --staged 
          Result:   diff --git a/demo.txt b/demo.txt
                    index b033121..525a42e 100644
                    --- a/demo.txt
                    +++ b/demo.txt
                    @@ -1 +1,2 @@
                    -This is demo file.
                    \ No newline at end of file
                    +This is demo file.
                    + List : 1. apple
                    \ No newline at end of file

    • git diff --color-words: used to show only changes and that too side by side.

            Example: 
            Command: git diff --color-words
            Result: diff --git a/demo.txt b/demo.txt
                    index 525a42e..1b6d18f 100644
                    --- a/demo.txt
                    +++ b/demo.txt
                    @@ -1,2 +1,3 @@
                    This is demo file.
                    List : 1. apple
                           2. banana 

                "2.Banana" comes in green color in op showing it was added.

    • git rm: used to stage changes after or while deleting a file (like git add does).
	
		Two situations are present in it: 
            1. When we delete file manually using gui. Then we need to stage chages so we use
            
            Command: git rm filename
            
            This will ensure that file is still present in the machine’s trash.
            2. When we delete using the cmd. It permanently deletes the file using unix delete.
            
            Command is same as above: git rm filename
            
            This also prevents the need of two steps first deleting then staging 
            automatically deletes and stages the change simultaneously.
            Also one imp note is it will delete permanently the file from 
            so use this is another copy is present somewhere else or if you 
            dont want the file.

            Example:
            Command: git rm file.txt
            Result:  rm 'file.txt'

                    on git status it shows

                    On branch main
                    Changes to be committed:
                    (use "git reset HEAD <file>..." to unstage)

                            deleted:    file.txt

    • Move and rename: we can do this in two ways:
        1. Manual renaming then we first need to stage deleted file name(git rm) and then stage new filename (git add). 
           Then in the staging area git will understand that the deleted file and new file are same and actually rename has taken place.

           Example: After manual renaming status will show mssg like:
                        On branch main
                        Changes not staged for commit:
                        (use "git add/rm <file>..." to update what will be committed)
                        (use "git checkout -- <file>..." to discard changes in working directory)

                                deleted:    demo.txt

                        Untracked files:
                        (use "git add <file>..." to include in what will be committed)

                                demo_renamed.txt

                    Then we write followin commands: git rm demo.txt
                                                     git add demo_renamed.txt
                                                     git status

                    Now the git status message will be: 
                    On branch main
                    Changes to be committed:
                    (use "git reset HEAD <file>..." to unstage)

                            renamed:    demo.txt -> demo_renamed.txt                                

        2. Using git mv command: moving is similar to rename here. 
               Command : git mv first_file.txt newfile.txt
               this will automatically stage the rename.

                Example: git mv GitNotes.txt Git_Notes.txt
                Result: On branch main
                        Your branch is up to date with 'origin/main'.

                        Changes to be committed:
                        (use "git reset HEAD <file>..." to unstage)

                            renamed:    GitNotes.txt -> Git_Notes.txt

    • To directly commit without staging: this command directly commits without staging but if there is a newfile which has not been committed even once then it wont commit that particular file and we will have to put that new file to staging .
	
		Command: git commit -a 
				git commit -all

        Example: 
            Command: git commit -am "Adds terminal o/p of rename command to Git_notes.txt"
            Result: [main df6b91d] Adds terminal o/p of rename command to Git_notes.txt
                    1 file changed, 9 insertions(+)

    • git show: shows the changes made in a specific commit
              Command: git show [hash value initials > 5] 
              
              Example:
              Command: git show 6a31046
              Result:   commit 6a3104668bbe81e0f2da6520ee592ef517233e3f (HEAD -> main)
                        Author: Avneet-s1b <avneet.bhatia@berylsystems.com>
                        Date:   Wed Oct 25 13:21:22 2023 +0530

                            Adds git commit all notes to Git_Notes.txt

                        diff --git a/Git/Git_Notes.txt b/Git/Git_Notes.txt
                        index 32a0eb1..26fe85b 100644
                        --- a/Git/Git_Notes.txt
                        +++ b/Git/Git_Notes.txt
                        @@ -421,4 +421,18 @@ Git is a version control system that allows to keep track of changes made. It is
                                                Changes to be committed:
                                                (use "git reset HEAD <file>..." to unstage)
                        
                        -                            renamed:    GitNotes.txt -> Git_Notes.txt
                        \ No newline at end of file
                        +                            renamed:    GitNotes.txt -> Git_Notes.txt
                        +
                        +    • To directly commit without staging: this command directly commits without staging but if there is a newfile which has not been committed even once then it wont commit that particular file and we will have to put that new file to staging .
                        +       
                        +               Command: git commit -a 
                        +                               git commit -all
                        +
                        +        Example: 
                        +            Command: git commit -am "Adds terminal o/p of rename command to Git_notes.txt"
                        +            Result: [main df6b91d] Adds terminal o/p of rename command to Git_notes.txt
                        +                    1 file changed, 9 insertions(+)
                        +
                        +    
                        +
                        +   
                        \ No newline at end of file


    • compare two commits: used to compare changes between two commits.
              Command: git diff HEAD..ea4a22a1f70c9 –color-words
             Just simply add .. between the two hash values of commits

            Example:
            Command: git diff HEAD..6a31046 --color-words
            Result: diff --git a/Git/Git_Notes.txt b/Git/Git_Notes.txt
                    index 0b23a5d..26fe85b 100644
                    --- a/Git/Git_Notes.txt
                    +++ b/Git/Git_Notes.txt
                    @@ -433,45 +433,6 @@ Git is a version control system that allows to keep track of changes made. It is
                                Result: [main df6b91d] Adds terminal o/p of rename command to Git_notes.txt
                                        1 file changed, 9 insertions(+)

                        • git show: shows the changes made in a specific commit
                                Command: git show [hash value initials > 5] 
                                            +    
                                            +
                                            +   
                                            \ No newline at end of file
                    
                    (END)


    • Atomic commits: it is imp to make atomic commit so that in future if we want one specific 
                      feature we can use it and similar category changes should be comitted together.

    • Amending a commit: Git doesnot allow us to amend past commits since amending any past commit 
                         will change that commit’s sha value and thus breaking the chain of all commits. 
                         But we can amend the previous commit since it is not the parent of any next commit 
                         till now.
          Command: git commit --amend -m “Amends the commit”
          Example: [main 6bbd472] Amends previous commit to add example in Git_Notes.txt
                    Date: Wed Oct 25 13:37:15 2023 +0530
                    1 file changed, 9 insertions(+), 3 deletions(-)

    
    • Retrieving an old version: git doesnt allow getting back an old commit since bringing back an old version wont
                                 maintain data integrity as sha value will repeat. Best way to retrieve old version is 
                                 too convert it into a new commit change.

		Command: git checkout [Hash-value] --

        Example:
        Command: git checkout b94b68c --
        Result: Note: checking out 'b94b68c'.

                You are in 'detached HEAD' state. You can look around, make experimental
                changes and commit them, and you can discard any commits you make in this
                state without impacting any branches by performing another checkout.

                If you want to create a new branch to retain commits you create, you may
                do so (now or later) by using -b with the checkout command again. Example:

                git checkout -b <new-branch-name>

                HEAD is now at b94b68c Adds mango to demo list

    • Going back to a commit: we can go back to a commit using two ways:
        1. In this we have accidentally made the commit of a file name A, now we want to revert the commit so we can do this by 
        Command: git reset HEAD~1

        Example:
        Command: git reset HEAD~1
        Result : (Head will now be at previous commit) 

                Unstaged changes after reset:
                M        demo.txt
            
            This will make the file again in staging area so that we can edit file 	
    		further and make one commit

        2.  In this we want to restore the previous version of a commit completely
                Command : git reset --hard HEAD~1 
                                or
                          git reset [hash] --hard

                Example: 
                Command: git reset --hard HEAD~2
                Result: HEAD is now at 93f3418 Renames demo_renamed.txt to demo.txt
            
            We have to be careful while using this command since once we return to
     		a particular commit stage we wont be able to go back in the future.
        

    • git revert: we can also go back to old stage using git revert
		
			Command: git revert HEAD~1
                            or 
                     git revert [hash]

            Example: 
            Command: git revert HEAD
            Result: [main b53a4f2] Revert "Adds cherry to list in demo.txt"
                    1 file changed, 1 insertion(+), 2 deletions(-)


    • git clean: this is used to clean untracked files 
                  Command: git clean -n (this will only show what it can remove)
                           git clean -f (this will actually remove the files)

                  Example: 

                  Command: git clean -n 
                  Result: Would remove file.txt

                  Command: git clean -f 
                  Result: Removing file.txt

    • .gitignore: If there is a log file that is being constantly logged, git will notice the changes 
                    and give us status notifications of commits pnding but we dont want that too happen 
                    since logs are going to change evrytime and we dont want to get bothered everytume so
                    in order too do that we add those files too .gitignore folder and git will ignore those 
                    folders everytime even if we make changes inside them.

	To ignore files on a global(user) level we hve to create .gitignore file on global 	
	mainly in the home dir with any name like .gitignore_global and then configure 	it using the Command: 
			git config --global core.excludesfile ~/.gitignore_global

    • How to ignore a tracked file: One way is to delete it from repo using rm command but it will also delete 
                                    it from working repo. So We delete it from staging idx using 
                                    Command: git rm --cached filename
	
	                                Now git will stop tracking this file.

                                    Example: 
                                    Comand: git rm --cached file.txt
                                    Result: rm 'Git/file.txt'

    • How to track empty dir: git tracks empty file but not empty dir so in order to track empty dir we create a .file (.gitkeep) 
                            which is empty and will stay hidden but git will now be tracking the empty folder.


Github

    • git clone: it is used to clone complete code from a git repo.
                       Command: git clone [repo-link]

                       This repo link could be https as well as ssh link.

                       Example: 
                       Command: git clone git@github.com:Avneet-s1b/sshrepo.git
                       Result: Cloning into 'testrepo'...
                               warning: You appear to have cloned an empty repository.

    • git remote add origin: When we clone a repo it already has a remote repo (origin) but when we create a project in our local machine and then we init it we have to add a remote origin in order to push to github. 
                      Command: git remote add origin [repo-link]
					           git remote -v (to verify remote origin)

                    Example: 
                    Command: git remote add origin git@github.com:Avneet-s1b/sshrepo.git

                    Command: git remote -v 
                    Result: origin  git@github.com:Avneet-s1b/sshrepo.git (fetch)
                            origin  git@github.com:Avneet-s1b/sshrepo.git (push)


    • git push: now when we add and commit the code starts getting tracked by git on our machine that is locally. In order to show these changes and start it getting tracked by the remote repo we have to push it to that repo.
                    Command: git push origin main
                             git push -u origin main (to set origin main path as default)
                      origin – here is the remote repo name
                      main – is the branch we are working on

                    Example: 
                    Command: git push origin main
                    Result: Counting objects: 4, done.
                            Delta compression using up to 4 threads.
                            Compressing objects: 100% (2/2), done.
                            Writing objects: 100% (4/4), 332 bytes | 332.00 KiB/s, done.
                            Total 4 (delta 0), reused 0 (delta 0)
                            To https://github.com/Avneet-s1b/demorepo.git
                            f1b565a..ea4441e  main -> main

    • git branch: This is used to check curr branch.

                    to check all branches:
                        Command: git branch 
                        Result: * master

                    to rename the branch:
                        Command: git branch -M newname 
                        Result: this will change current branch name to main on showing git branch 
                                * main

                    to go to any specific branch:
                    Command: git checkout branchname 
                    Result:  Switched to branch 'main'

                    to create a new branch:
                    Command: git checkout -b newBranchname 
                    Result: Switched to a new branch 'branch1'

                    to delete a branch locally:
                    Command: git branch -d branchname  
                    Result:  Deleted branch branch1 (was 67aaf4e).

                    to delete a branch on remote repo         
                    Command: git push origin --delete branchname 

                    to view remote branches stored on local machine:
                    Command: git remote -r

	We cannot delete a branch if we are on it. 

    • How to see diff bw two branch: git diff command is used
			Command: git diff branchname (this branchname is the 
					branchname you want to compare your curr branch with)

            Example:
            Command: git diff branch1
            Result: diff --git a/demo.txt b/demo.txt
                    index c8d6a06..5e99fe6 100644
                    --- a/demo.txt
                    +++ b/demo.txt
                    @@ -1,7 +1,6 @@
                    This is demo file.
                    List 1 : 1. apple
                            2. banana
                    -        3. grapes
                            4. cherry
 

    • Merge code: It can be done in two ways
        1. one is through pull req through github. Manually merge the branch through github and then to make those code sync with local machine we use 
                Command: git pull origin main
            Pull is used to sync the local git with remote repository.

        2. To merge using cmd we use 
                Command: git merge branchname (name of branch that you want 
            			 to merge with your curr branch)

                Example:
                Command: git merge branch1
                Result: Updating c5df131..4331e1e
                        Fast-forward
                        demo.txt | 8 +-------
                        1 file changed, 1 insertion(+), 7 deletions(-)

                        Branches merged without any conflicts

    • Merge Conflicts: Sometimes merge conflicts may arise if there are two different changes at a same place and git 
                       is unable to decide which feature to keep so in that case we have to manually resolve the conflict and
                       then commit the changes.

                Example:
                Command: git merge branch1
                Result: Auto-merging demo.txt
                        CONFLICT (content): Merge conflict in demo.txt
                        Automatic merge failed; fix conflicts and then commit the result.ches merged without any conflicts

    • pull/fetch: git pull copies changes from a remote repository directly into our working directory, while git fetch does not. 
                The git fetch command only copies changes into our local Git repo.

                Example:
                Command: git pull origin main
                Result: From https://github.com/Avneet-s1b/demorepo
                        * branch            main       -> FETCH_HEAD
                        Auto-merging file.txt
                        CONFLICT (content): Merge conflict in file.txt
                        Automatic merge failed; fix conflicts and then commit the result.

    • Fork: Forking a repository means creating exact duplicate of an exisitng repo. It is done manually in github.
            A fork is a copy of a repository that allows you to make your own changes without impacting the original project. 
            Diff bw fork and clone: A fork differs from a cloned copy in that it doesn't allow for direct collaboration with the root using
            local commands like git push and git pull.


    • Stash: stash is used when we have made some changes and staged them but we dont want to commit them right now. We want to go back to our last repository state but also dont wanna lose the staged changes so we will send these changes to stash from staging area and will pop/bring back whenever required.
                          Command: git add .
                                          git stash (to add to stash)
                                          git stash pop (to call back from stash)
                                          git stash clear (to clear the stash)

                        Example: 
                        Command: git stash
                        Result: Saved working directory and index state WIP on main: 20a192b Resolves merge cnflict during git pul

                        Command: git stash pop 
                        Result: On branch main
                                Changes not staged for commit:
                                (use "git add <file>..." to update what will be committed)
                                (use "git checkout -- <file>..." to discard changes in working directory)

                                        modified:   demo.txt

                                no changes added to commit (use "git add" and/or "git commit -a")
                                Dropped refs/stash@{0} (04ace3347525b20b37e29f5801d6a0bf931b4b8d)

                        Command: git stash clear
                        Result: git stash pop
                                No stash entries found. 

    • Squashing commits: means squashing 2 or more commits into one single commit. Two ways: 
        1. Use reset: git reset hash
        This command will take our head to that hash and all the commits after this commit will be unstaged now and then we can simply commit all these changes as one commit. (this trick only useful for squashing latest commits only not in between)

        2. REBASE: Used to squash any commit.
            Command: git rebase -i db7f421

            This will bring all the commits after it and we can then merge the 
            commits after it.

            Example:
            Command: git rebase -i 660ef65
            Result: Before
                    d9749ec (HEAD -> main) Adds Quality4,5 together
                    fc9e409 Adds quality 3 to demo.txt
                    bc716b6 Adds quality 2 to demo.txt
                    660ef65 Adds quality 1 to demo.txt
                    3e67bc8 Uses stash to save staged changes

                    After 
                    e86e054 (HEAD -> main) Adds Quality1,2,3,4,5 together using rebase
                    660ef65 Adds quality 1 to demo.txt

        • Cherry-pick: This is used to add a certain commit from another branch to our branch like a bug that has been already fixed in some other branch i will just use cherry pick to add that particular commit to my head: 
            Command: git cherry-pick [hash]
                    git cherry-pick [hash] -n (if u dont want to commit directly 	
                                    			but stage the changes first)

            Example:
            Command: git cherry-pick 2c15ae5
            Result: [main c012ca8] Removes 4,5 Quality in desc of branch1
                    Date: Wed Oct 25 17:38:04 2023 +0530
                    1 file changed, 2 deletions(-)
                    
                

                            

   
   Personal Access Token: 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