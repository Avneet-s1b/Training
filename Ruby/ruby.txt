
                            ***RUBY***


    INSTALLATION
        1. Open cmd.
        2. Run following commands:
            - $ gpg2 --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
            - $ \curl -sSL https://get.rvm.io | bash -s stable --rails
        3. Then To start using RVM you need to run `source /home/beryl/.rvm/scripts/rvm` .
        4. Rvm is installed.
        5. Some important commands in rvm: 
            - rvm list (shows total versions of ruby on current system)
                =* ruby-3.0.0 [ x86_64 ]

                # => - current
                # =* - current && default
                #  * - default
            
            - rvm list known (shows available versions of ruby)
                # MRI Rubies
                [ruby-]1.8.6[-p420]
                [ruby-]1.8.7[-head] # security released on head
                [ruby-]1.9.1[-p431]
                [ruby-]1.9.2[-p330]
                [ruby-]1.9.3[-p551]
                [ruby-]2.0.0[-p648]
                [ruby-]2.1[.10]
                [ruby-]2.2[.10]
                [ruby-]2.3[.8]
                [ruby-]2.4[.10]
                [ruby-]2.5[.8]
                [ruby-]2.6[.6]
                [ruby-]2.7[.2]
                [ruby-]3[.0.0]
                ruby-head

            - rvm install [version]  (to install specific version of ruby)

            - rvm use 3.0.0 (to switch to specific ruby version)

            - rvm use 2.7.2 --default (to set default version of ruby)

            - rvm -v (to show rvm version)

            - ruby -v (to show current ruby version)

            - irb (to open interactive ruby)


    FIRST PROGRAM

        - puts "Hello World!"
        Result: Hello World!
                => nil 

        - Difference between puts vs print 
            puts add new line after printing where as print doesnt 


    Classes and Objects 

        Example:

            #this is our comment and beneath is our class 
            class Customer
                @@no_of_cust = 0 #this is our variable

                def initialize(id,name) #this is our member function
                    @cust_id = id
                    @cust_name = name 
                end

                def printinfo
                    puts("name :" + @cust_name)
                end
            end
            #we have to end every class and function

            cust1 = Customer.new("1","Avneet")

            cust1.printinfo()

            Result: name :Avneet

    
    VARIABLES

        Code:

            name = "Avneet" #this is our variable of type string
            puts("this is our name: "+name) #just like java this is how we use variables in a string
            name = "Tom"
            puts("this is our name: "+name)

            Result: this is our name: Avneet
                    this is our name: Tom

        
        - Global Var: Global variables begin with $. Have scope of global.

                Example: 
                    $global_var = 10

                    class Practice
                        def print_global
                            puts("this is our global var: #$global_var") # we use # before variables in order to use var of different data type than string with string
                        end
                    end

                    prac1 = Practice.new

                    prac1.print_global()

                Result: this is our global var: 10

        
        - Instance Var: Instance variables begin with @.

                Example: 

                class Customer

                    def initialize(id,name) 
                        @cust_id = id
                        @cust_name = name #these are our instance variable
                    end

                    def printinfo
                        puts("name :" + @cust_name)
                    end
                end

                cust1 = Customer.new("1","Avneet")

                cust1.printinfo()

                Result:  name :Avneet


        - Class Var : Class variables begin with @@ and must be initialized before they can be used in method definitions.
                        Referencing an uninitialized class variable produces an error.
                        Class variables are shared among descendants of the class or module in which the class variables are defined.

            Example: 

                class Practice
                    @@no_of_instance = 0

                    def find_inst
                        @@no_of_instance += 1
                        puts("these are our no of instances: #@@no_of_instance" )
                    end
                end

                prac1 = Practice.new

                prac1.find_inst()

                prac2 = Practice.new

                prac2.find_inst()

                Result: these are our no of instances: 1
                        these are our no of instances: 2

                #if we call find_inst again it will increase the instances by 3 and this 3 will be shared by both the Objects

        
        - Local Var: Local variables begin with a lowercase letter or _. The scope of a local variable ranges from class, module, def, 
                     or do to the corresponding end or from a block's opening brace to its close brace {}
        

        - What is the difference between class variables and class instance variables?
        The main difference is the behavior concerning inheritance: class variables are shared between a class and all its subclasses, 
        while class instance variables only belong to one specific class.


        - Constants: Constants begin with an uppercase letter. Constants defined within a class or module can be accessed from within that class or module, 
                     and those defined outside a class or module can be accessed globally.

            Example:
            VAR1 = "Avneet"

            puts(VAR1)

            VAR1 = "Tom"

            puts(VAR1)

            Result: Avneet
                    practice.rb:25: warning: already initialized constant VAR1
                    practice.rb:21: warning: previous definition of VAR1 was here
                    Tom

            # Making an assignment to a constant that is already initialized produces a warning.

        
        - Basic Literals: includes int, float, string, array, ranges



    OPERATORS

        - Arithmetic Operators 
            includes Operators: + , - , * , / , % , **(exponent)

            Example: 
                a = 4
                b = 3

                puts(a+b)

                puts(a%b)

                puts(a**b)

            Result: 7
                    1
                    64

        - Comparison Operators
            includes : < , > , == , != , <= , >= , <=> , === , .eql? , equal?

                - <=> : Combined comparison operator. Returns 0 if first operand equals second, 
                        1 if first operand is greater than the second and -1 if first operand is less
                        than the second.
                    Example:
                    a = 4
                    b = 4

                    puts(a<=>b)

                    Result: 0

                - === : Used to test equality within a when clause of a case statement.
                    Example:
                    a = 4
                    b = 4

                    puts(a===b)
                
                    Result: true

                - .eql? : True if the receiver and argument have both the same type and equal values.
                    Example:
                    a = 4
                    b = 4.0

                    puts(a.eql?(b))

                    Result: False

                - equal? : True if the receiver and argument have the same object id.


        - Assignment Operators 
            includes: += , -= , /= , *= , %= , **=

            Example:

                a = 2
                b = 2
                c = a+b

                puts(c)

                c **= a 

                puts(c)

                Result:
                4
                16

        - Parallel Assignment
            We can assign parallely in ruby like: a,b = 10,20 . It is beneficial for swapping between values

            Example:
                a = 2
                b = 4
                c = 3
                puts("#{a},#{b},#{c}")
                b,c = a,b
                puts("#{a},#{b},#{c}")

            Result: 2,4,3
                    2,2,4

        - Bitwise operators 
            includes: & (and), | (or), ^ (xor), ~ (negation), << (left shift), >>(right shift)

            - & 
            Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a & b)

                # a & b = 0000 1100

                Result: 12

            - |
            Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a | b)


                Result: 61    

            - ^
            Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a ^ b)


                Result: 49    

            - ~
                Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (~a)

                Result: -61

            - <<
                Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a<<2) # shift left operand by 2

                Result: 240

            - >>
                Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a>>2) # shift left operand by 2

                Result: 15


        - Logical Operator 
            includes: and , or , && , || , ! , not (similarly used as in other prog languages)

                Example:
                a = 60 
                b = 13

                puts(a==40 || b==13)

                Result: true

        
        - Ternary operator
            includes: If Condition is true ? Then value X : Otherwise value Y

            Example:
                a = 60 
                b = 13

                puts(a>b ? "a is greater than b" : "a is lesser than b")

                Result: a is greater than b
