
                            ***RUBY***


    INSTALLATION
        1. Open cmd.
        2. Run following commands:
            - $ gpg2 --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
            - $ \curl -sSL https://get.rvm.io | bash -s stable --rails
        3. Then To start using RVM you need to run `source /home/beryl/.rvm/scripts/rvm` .
        4. Rvm is installed.
        5. Some important commands in rvm: 
            - rvm list (shows total versions of ruby on current system)
                =* ruby-3.0.0 [ x86_64 ]

                # => - current
                # =* - current && default
                #  * - default
            
            - rvm list known (shows available versions of ruby)
                # MRI Rubies
                [ruby-]1.8.6[-p420]
                [ruby-]1.8.7[-head] # security released on head
                [ruby-]1.9.1[-p431]
                [ruby-]1.9.2[-p330]
                [ruby-]1.9.3[-p551]
                [ruby-]2.0.0[-p648]
                [ruby-]2.1[.10]
                [ruby-]2.2[.10]
                [ruby-]2.3[.8]
                [ruby-]2.4[.10]
                [ruby-]2.5[.8]
                [ruby-]2.6[.6]
                [ruby-]2.7[.2]
                [ruby-]3[.0.0]
                ruby-head

            - rvm install [version]  (to install specific version of ruby)

            - rvm use 3.0.0 (to switch to specific ruby version)

            - rvm use 2.7.2 --default (to set default version of ruby)

            - rvm -v (to show rvm version)

            - ruby -v (to show current ruby version)

            - irb (to open interactive ruby)


    FIRST PROGRAM

        - puts "Hello World!"
        Result: Hello World!
                => nil 

        - Difference between puts vs print 
            puts add new line after printing where as print doesnt 


    Classes and Objects 

        Example:

            #this is our comment and beneath is our class 
            class Customer
                @@no_of_cust = 0 #this is our variable

                def initialize(id,name) #this is our member function
                    @cust_id = id
                    @cust_name = name 
                end

                def printinfo
                    puts("name :" + @cust_name)
                end
            end
            #we have to end every class and function

            cust1 = Customer.new("1","Avneet")

            cust1.printinfo()

            Result: name :Avneet

    
    VARIABLES

        Code:

            name = "Avneet" #this is our variable of type string
            puts("this is our name: "+name) #just like java this is how we use variables in a string
            name = "Tom"
            puts("this is our name: "+name)

            Result: this is our name: Avneet
                    this is our name: Tom

        
        - Global Var: Global variables begin with $. Have scope of global.

                Example: 
                    $global_var = 10

                    class Practice
                        def print_global
                            puts("this is our global var: #$global_var") # we use # before variables in order to use var of different data type than string with string
                        end
                    end

                    prac1 = Practice.new

                    prac1.print_global()

                Result: this is our global var: 10

        
        - Instance Var: Instance variables begin with @.

                Example: 

                class Customer

                    def initialize(id,name) 
                        @cust_id = id
                        @cust_name = name #these are our instance variable
                    end

                    def printinfo
                        puts("name :" + @cust_name)
                    end
                end

                cust1 = Customer.new("1","Avneet")

                cust1.printinfo()

                Result:  name :Avneet


        - Class Var : Class variables begin with @@ and must be initialized before they can be used in method definitions.
                        Referencing an uninitialized class variable produces an error.
                        Class variables are shared among descendants of the class or module in which the class variables are defined.

            Example: 

                class Practice
                    @@no_of_instance = 0

                    def find_inst
                        @@no_of_instance += 1
                        puts("these are our no of instances: #@@no_of_instance" )
                    end
                end

                prac1 = Practice.new

                prac1.find_inst()

                prac2 = Practice.new

                prac2.find_inst()

                Result: these are our no of instances: 1
                        these are our no of instances: 2

                #if we call find_inst again it will increase the instances by 3 and this 3 will be shared by both the Objects

        
        - Local Var: Local variables begin with a lowercase letter or _. The scope of a local variable ranges from class, module, def, 
                     or do to the corresponding end or from a block's opening brace to its close brace {}
        

        - What is the difference between class variables and class instance variables?
        The main difference is the behavior concerning inheritance: class variables are shared between a class and all its subclasses, 
        while class instance variables only belong to one specific class.


        - Constants: Constants begin with an uppercase letter. Constants defined within a class or module can be accessed from within that class or module, 
                     and those defined outside a class or module can be accessed globally.

            Example:
            VAR1 = "Avneet"

            puts(VAR1)

            VAR1 = "Tom"

            puts(VAR1)

            Result: Avneet
                    practice.rb:25: warning: already initialized constant VAR1
                    practice.rb:21: warning: previous definition of VAR1 was here
                    Tom

            # Making an assignment to a constant that is already initialized produces a warning.

        
        - Basic Literals: includes int, float, string, array, ranges



    OPERATORS

        - Arithmetic Operators 
            includes Operators: + , - , * , / , % , **(exponent)

            Example: 
                a = 4
                b = 3

                puts(a+b)

                puts(a%b)

                puts(a**b)

            Result: 7
                    1
                    64

        - Comparison Operators
            includes : < , > , == , != , <= , >= , <=> , === , .eql? , equal?

                - <=> : Combined comparison operator. Returns 0 if first operand equals second, 
                        1 if first operand is greater than the second and -1 if first operand is less
                        than the second.
                    Example:
                    a = 4
                    b = 4

                    puts(a<=>b)

                    Result: 0

                - === : Used to test equality within a when clause of a case statement.
                    Example:
                    a = 4
                    b = 4

                    puts(a===b)
                
                    Result: true

                - .eql? : True if the receiver and argument have both the same type and equal values.
                    Example:
                    a = 4
                    b = 4.0

                    puts(a.eql?(b))

                    Result: False

                - equal? : True if the receiver and argument have the same object id.


        - Assignment Operators 
            includes: += , -= , /= , *= , %= , **=

            Example:

                a = 2
                b = 2
                c = a+b

                puts(c)

                c **= a 

                puts(c)

                Result:
                4
                16

        - Parallel Assignment
            We can assign parallely in ruby like: a,b = 10,20 . It is beneficial for swapping between values

            Example:
                a = 2
                b = 4
                c = 3
                puts("#{a},#{b},#{c}")
                b,c = a,b
                puts("#{a},#{b},#{c}")

            Result: 2,4,3
                    2,2,4

        - Bitwise operators 
            includes: & (and), | (or), ^ (xor), ~ (negation), << (left shift), >>(right shift)

            - & 
            Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a & b)

                # a & b = 0000 1100

                Result: 12

            - |
            Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a | b)


                Result: 61    

            - ^
            Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a ^ b)


                Result: 49    

            - ~
                Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (~a)

                Result: -61

            - <<
                Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a<<2) # shift left operand by 2

                Result: 240

            - >>
                Example:
                a = 60 
                b = 13

                # a    =  0011 1100
                # b    =  0000 1101 in bits

                puts (a>>2) # shift left operand by 2

                Result: 15


        - Logical Operator 
            includes: and , or , && , || , ! , not (similarly used as in other prog languages)

                Example:
                a = 60 
                b = 13

                puts(a==40 || b==13)

                Result: true

        
        - Ternary operator
            includes: If Condition is true ? Then value X : Otherwise value Y

            Example:
                a = 60 
                b = 13

                puts(a>b ? "a is greater than b" : "a is lesser than b")

                Result: a is greater than b


    COMMENTS
        - single line comment: use #
        - multi line comment: =begin this our comment 
                                this is our somnet
                              =end


    IF ELSE
        - Example
            a = 4
            b = 2

            if (a<b)
                puts("a is less than b")
            elsif (a>b)
                puts("a is great than b")
            else
                puts("a and b are equal")
            end

            Result: a is great than b


        - if modifier
            Example:
                a = true

                puts("a is true") if a

                Result: a is true

        - unless conditon and modifier
            Example:
                a = 4
                b = 2

                unless a<b
                    puts("a is great than b")
                else 
                    puts("a is less than b")
                end

                var = 1
                puts("var must be false to print this") unless var!=1

                Result: a is great than b
                        var must be false to print this

        
        - case
            Example:
                age = 5

                case age
                when 0..2
                    puts("baby")
                when 2..6
                    puts("toddler")
                end

                Result: toddler

    
    LOOPS

        - While 
            Example:
            i = 1
            num = 5

            while (i<=num) do
                puts("num : #{i}")
                i += 1
            end

            Result:
            num : 1
            num : 2
            num : 3
            num : 4
            num : 5

        - While modifier (do-while loop)
            Example:
            i = 1
            num = 5

            begin 
                puts("num: #{i}")
                i += 1
            end while (i<num)

            Result:
            num: 1
            num: 2
            num: 3
            num: 4

        - until (false jb tk hai tb tk loop will run)
            Example:
            i = 1
            num = 5

            until i>num do
                puts("num: #{i}")
                i += 1
            end

            Result:
            num: 1
            num: 2
            num: 3
            num: 4
            num: 5

        - until modifier
            Example:
            i = 5
            num = 10

            begin
                puts("num: #{i}" )
                i+=1
            end until i>num

            Result:
            num: 5
            num: 6
            num: 7
            num: 8
            num: 9
            num: 10

        - for
            Example:
            for i in 0..5
                puts "value : #{i}"
            end

            Result:
            value : 0
            value : 1
            value : 2
            value : 3
            value : 4
            value : 5

        - for each
            Example:
            (10..15).each do |i|
                puts("value in for each: #{i}")
            end

            Result:
            value in for each: 10
            value in for each: 11
            value in for each: 12
            value in for each: 13
            value in for each: 14
            value in for each: 15

        - next and break clause
            Example:
            for i in 0..10
                if i<2
                    next
                end
                puts("values: #{i}")

                if i>7
                    break
                end
            end

            Result:
            values: 2
            values: 3
            values: 4
            values: 5
            values: 6
            values: 7
            values: 8

        - redo : restarts thwe iteration of most internal loop without checking the Condition
            Example:
            for i in 0..10
                if i<5
                    i+=1
                    puts("redo running")
                    redo
                else
                    puts("values: #{i}")
                end
            end
            
            Result:
            redo running
            redo running
            redo running
            redo running
            redo running
            values: 5
            redo running
            redo running
            redo running
            redo running
            values: 5
            redo running
            redo running
            redo running
            values: 5
            redo running
            redo running
            values: 5
            redo running
            values: 5
            values: 5
            values: 6
            values: 7
            values: 8
            values: 9
            values: 10

        - retry: If retry appears in rescue clause of begin expression, restart from the 
                beginning of the begin body.

    
    METHODS

        - No parameters

            Example:
            def fun1
                puts "This is function without parameters"
            end

            fun1

            Result: This is function without parameters

        - With paramters and default values too
            Example:
            def fun2(para1 = "ruby" , para2 = "java")
                puts "This is function with parqamters : #{para1} , #{para2}"
            end

            fun2 "c++" , "kotlin"

            fun2

            Result: This is function with parqamters : c++ , kotlin
                    This is function with parqamters : ruby , java

        - With variable parameters
            Example:
            def fun3(*test)
                for i in 0..test.length-1
                    puts("this is a variable parameter function : #{i} - #{test[i]}")
                end
            end

            fun3 "eee" , 1 , "3"

            Result: this is a variable parameter function : 0 - eee
                    this is a variable parameter function : 1 - 1
                    this is a variable parameter function : 2 - 3

        - With return value
            Example:
            def fun4
                i = 0;
                j = 10;
                return i,j 
            end

            var = fun4

            puts var

            Result: 0
                    10


    BLOCKS
        - A block consists of chunks of code. The code in the block is always enclosed within braces ({}).
          A block is always invoked from a function with the same name as that of the block.

        - Without parameters

        First way

        Example:
        def fun
            puts "this is call from method"
            yield
        end

        fun { puts"this is call from block"}

        Result: this is call from method
        this is call from block

        Secind way:

        Example:
        def fun3(&block)
            puts "this is call from method"
            block.call
        end

        fun3 {puts "this is call from block"}


        Result: this is call from method
        this is call from block

        - With parameters
        Example:
        def fun2
            puts "this is call from method"

            yield 1
        end

        fun2 {|i| puts "this is call from block with parameter : #{i}"}

        Result: this is call from method
        this is call from block with parameter : 1

        - Begin and End blocks

        Example:
        BEGIN{
            puts "the code begins"
        }

        END{
            puts "the code ends"
        }

        puts "this is not a block"

        Result: the code begins
                this is not a block
                the code ends


    MODULES
        - Modules are a way of grouping together methods, classes, and constants. 

        Example:
        module Mod 
            CON = "Avneet"
            var1 = 1
            def print
                puts "this is our module : #{CON} #{var1}"
            end
        end

        To import this module in any file we use "require" keyword

        require './mod.rb'

        - We can also use modules in other modules using "include" keyword

    
    MIXINS
        - Ruby does not support multiple inheritance directly but Ruby Modules have another wonderful use.
        - Mixins give you a wonderfully controlled way of adding functionality to classes.

            Example:
            mod.rb file

            module Mod 
                CON = "Avneet"
                def print
                    puts "this is our module #{CON}"
                end
            end

            main file

            require './mod.rb'


            class Demo
            include Mod
            end

            obj1 = Demo.new

            obj1.print

            Result: this is our module Avneet


    STRINGS
        - A String object in Ruby holds and manipulates an arbitrary sequence of one or more bytes, 
          typically representing characters that represent human language.

        - "this is a string"

        Example:
        3.0.0 :001 > a = "this is Avneet's string literal"
        => "this is Avneet's string literal" 
        3.0.0 :002 > puts a
        Result: this is Avneet's string literal

        - Accessing: With the help of [] brackets. -1 index is for last character.
        Example:
        3.0.0 :005 > puts a
        this is Avneet's string literal
        => nil 
        3.0.0 :006 > puts a[1]
        h

        - Variable interpolation: we can add variables in string using '#{}'
        Example: num = 1
                    a = "tis is our string #{num}"

        - Freezing : In Ruby, by default strings are not immutable. To make them immutable, freeze method can be used. Immutable is defined as an existing string can't be modified, only a new string can be created out of them.
        Syntax : string-name.freeze

        String Public Class Methods

        1. new : this is used to generate new string.

        Example:
        3.0.0 :007 > str = String.new("this string is created using new")
        => "this string is created using new" 
        3.0.0 :008 > puts str
        this string is created using new
        => nil 


        2. try_convert: If object is a String object, returns object. Returns nil if object does not respond to :to_str.
        
        Example:
        3.0.0 :009 > num = 1
        => 1 
        3.0.0 :010 > String.try_convert(num)
        => nil 
        3.0.0 :011 > String.try_convert(str)
        => "this string is created using new"


        3. %: basically creates a string and then substitute value specified
        Example:
        3.0.0 :003 > "%06d" %12345
        => "012345" 


        4. *: used to multiply the string this number of times.

        Example:
        3.0.0 :014 > str
        => "this string is created using new" 
        3.0.0 :015 > str * 4
        => "this string is created using newthis string is created using newthis string is created using newthis string is created using new"


        5. +: used to concatanate strings.
        Example: 
        3.0.0 :004"> str = "My name is "
        => "My name is " 
        3.0.0 :005 > str + "Avneet"
        => "My name is Avneet" 


        6. << : used to concatanate strings. if its a num value then it is converted to char this val is corresponding to then concatenated.
        Example:
        3.0.0 :001 > a = "hello"
        => "hello" 
        3.0.0 :002 > a << "avneet"
        => "helloavneet" 
        3.0.0 :003 > a
        => "helloavneet" 


        7. <=> : used to compare strings.
                -1 if other_string is larger.
                0 if the two are equal.
                1 if other_string is smaller.
                nil if the two are incomparable.

        Example:
        3.0.0 :004 > "foo" <=> "eoo"
        => 1 
        3.0.0 :005 > "eoo" <=> "foo"
        => -1 
        3.0.0 :006 > "foo" <=> "foo"
        => 0


        8. == : Returns true if object has the same length and content; as self; false otherwise:

        Example:
        3.0.0 :007 > "foo" == "foo"
        => true 
        3.0.0 :008 > "foo" == "eoo"
        => false      


        9. ===: Alias for == 

        Example:
        3.0.0 :009 > v = 22
        => 22 
        3.0.0 :010"> v == "22"
        => false 
        3.0.0 :011 > v === "22"
        => false 


        10. =~ [regexp] : used to find the starting index of the seq specified.

        Example:
        3.0.0 :003 > a
        => "helloAvneet" 
        3.0.0 :004 > a =~ /o/
        => 4 
        3.0.0 :005 > a =~ /q/
        => nil
        

        11. [] : used to return a substring.

                string[index] → new_string or nil
                string[start, length] → new_string or nil
                string[range] → new_string or nil
                string[regexp, capture = 0] → new_string or nil
                string[substring] → new_string or nil

        Example:
        3.0.0 :009 > a
        => "helloAvneet" 
        3.0.0 :010 > a[2]
        => "l" 
        3.0.0 :011 > a[1,4]
        => "ello" 
        3.0.0 :012 > a[1..4]
        => "ello"


        12. ascii_only? : returns true is string has ascii char only else false.

        Example:
        3.0.0 :016 > a
        => "helloAvneet" 
        3.0.0 :017 > a.ascii_only?
        => true

        13. b : Returns a copy of self that has ASCII-8BIT encoding; the underlying bytes are not modified:
        
        Example :
        3.0.0 :090"> str="Hello"
        => "Hello" 
        3.0.0 :091 > t=str.b
        => "Hello" 
        3.0.0 :092 > t
        => "Hello"


        14. byteindex : Returns the Integer byte-based index of the first occurrence of the given substring, or nil if none found.
        
        Example :
        3.2.2 :001 > str="Hello"
        => "Hello" 
        3.2.2 :002 > str.byteindex('e')
        => 1 
        
        With offset; example :
        3.2.2 :003 > str.byteindex('l',3)
        => 3


        15. byterindex : Returns the Integer byte-based index of the last occurrence of the given substring, or nil if none found:
        
        Example :
        3.2.2 :006 > str = "Hello"
        => "Hello" 
        3.2.2 :007 > str.byterindex('l')
        => 3 
        
        With offset example :
        3.2.2 :010 > str.byterindex('l',2)
         => 2


        16. bytes:  Returns an array of the bytes in self.

        Example:
        3.0.0 :018 > a = "Avneet"
        => "Avneet" 
        3.0.0 :019 > a.bytes
        => [65, 118, 110, 101, 101, 116] 


        17. bytesize : Returns the count of bytes (not characters) in self.
        Example :
        3.0.0 :020 > a.bytesize
        => 6 


        18. byteslice (index,length=1) : Returns the substring.
        Example :
        3.2.2 :006 > str = "Hello"
        => "Hello" 
        3.2.2 :019 > str.byteslice(2)
        => "l" 
        3.2.2 :020 > str.byteslice(2,3)
        => "llo" 


        19. bytesplice: Replaces some of the content and gives a new string. if len of new string mismatches then it adjusts acc to the new string given

        Example:
        3.2.0 :001 > str = "Hello"
        => "Hello" 
        3.2.0 :002 > str.bytesplice(2,3,"llll")
        => "llll" 
        3.2.0 :003 > str
        => "Hellll"


        20. Capitalize : Returns a string containing the characters in self; the first character is upcased; the remaining characters are downcased.
        Example :
        3.2.2 :030 > str="hELLO"
        => "hELLO" 
        3.2.2 :031 > str.capitalize
        => "Hello"  


        21. Capitalize! : Upcases the first character in self; downcases the remaining characters; returns self if any changes were made, nil otherwise.

        Example:
        3.2.0 :006 > str.capitalize!
        => "Hello world" 
        3.2.0 :007 > str.capitalize!
        => nil 


        22. casecmp : Compares self.downcase and other_string.downcase
                    -1 if other_string.downcase is larger.
                    0 if the two are equal.
                    1 if other_string.downcase is smaller.
                    nil if the two are incomparable.
        
        Example : 
        3.0.0 :001 > str="Hello"
        => "Hello" 
        3.0.0 :002 > str.casecmp("hello")
        => 0 


        23. casecmp? : Returns true if self and other_string are equal after Unicode case folding, otherwise false
        
        Example :
        3.2.0 :008 > str
        => "Hello world" 
        3.2.0 :009 > str.casecmp?("heello")
        => false 


        24. center(size, pad_string = ' ') : Returns a centered copy of self.

        Example: 
        3.2.0 :012 > str
        => "Hello" 
        3.2.0 :013 > str.center(6,"&")
        => "Hello&" 
        3.2.0 :014 > str.center(11,"&")
        => "&&&Hello&&&" 
        3.2.0 :015 > str.center(4,"&")
        => "Hello"


        25. chars : Returns an array of the characters in self.
        Example :
        3.0.0 :006 > str.chars
        => ["H", "e", "l", "l", "o"] 


        26. chomp : Returns a new string copied from self, with trailing characters possibly removed. When line_sep is "\n", 
                    removes the last one or two characters if they are "\r", "\n", or "\r\n" (but not "\n\r"):

        Example:
        3.2.0 :025 > str = "Hello\n"
        => "Hello\n" 
        3.2.0 :026 > str.chomp
        => "Hello"


        27. chomp!(line_sep = $/) : Like String#chomp, but modifies self in place; returns nil if no modification made, self otherwise.

        Example:
        3.2.0 :032 > str
        => "hello" 
        3.2.0 :033 > str.chomp!('o')
        => "hell" 


        28. chop : Returns a new string copied from self, with trailing characters possibly removed.Removes "\r\n" if those are the last two characters.
        
        Example :
        3.0.0 :018 > str="hello\r\n"
        => "hello\r\n" 
        3.0.0 :019 > str.chop
        => "hello" 
        Otherwise removes the last character if it exists.
        3.0.0 :022 > str
        => "hello" 
        3.0.0 :023 > str.chop
        => "hell"


        29. chop! : It modifies self in place; returns nil if self is empty, self otherwise.
        
        Example :
        3.0.0 :024 > str
        => "hello" 
        3.0.0 :025 > str.chop!
        => "hell" 


        30. chr : Returns a string containing the first character of self
        
        Example :
        3.0.0 :026 > str.chr
        => "h" 

        
        31. clear : Removes the contents of self.
        
        Example : 
        3.0.0 :027 > str.clear
        => "" 


        32. codepoints : Returns an array of the codepoints in self; each codepoint is the integer value for a character.
        
        Example :
        3.0.0 :029 > str="hello"
        => "hello" 
        3.0.0 :030 > str.codepoints
        => [104, 101, 108, 108, 111]


        33. concat : Concatenates each object in objects to self and returns self.

        Example:
        3.0.0 :001 > str = "hello"
        => "hello" 
        3.0.0 :002 > str.concat(" Avneet")
        => "hello Avneet" 
        3.0.0 :003 > str
        => "hello Avneet"


        34. count(*selectors) : Returns the total number of characters in self that are specified by the given selectors
    
        Example :
        3.0.0 :033 > str="hello"
        => "hello" 
        3.0.0 :034 > str.count('lo')
        => 3


        35. delete(*selectors) : Returns a copy of self with characters specified by selectors removed.

        Example:
        3.0.0 :006 > str.delete("l")
        => "heo" 
        3.0.0 :007 > str
        => "hello" 


        36. delete!(*selectors) : It modifies self in place. Returns self if any changes were made, nil otherwise.
        
        Example :
        3.0.0 :008 > str.delete!("l")
        => "heo" 
        3.0.0 :009 > str
        => "heo" 


        37. delete_prefix (prefix) : Returns a copy of self with leading substring prefix removed
        
        Example :
        3.0.0 :048 > str.delete_prefix('he')
        => "llo"


        38. delete_prefix!(prefix) : Returns self if the prefix is removed, nil otherwise.

        Example:
        3.2.0 :005 > str.delete_prefix!('he')
        => "llo" 
        3.2.0 :006 > str
        => "llo"

        39. delete_suffix (suffix) : Returns a copy of self with trailing substring suffix removed
        
        Example :
        3.0.0 :049 > str
        => "hello" 
        3.0.0 :050 > str.delete_suffix('llo')
        => "he"


        40. delete_suffix!(suffix) : Returns self if the suffix is removed, nil otherwise.
        
        Example :
        3.0.0 :051 > str.delete_suffix!('llo')
        => "he"


        41. downcase(*options) : Returns a string containing the downcased characters in self.
        
        Example :
        3.2.0 :009 > str.downcase
        => "hello" 
        3.2.0 :010 > str
        => "Hello" 


        42. downcase! : Modify original string.
        
        Example :
        3.2.0 :011 > str.downcase!
        => "hello" 
        3.2.0 :012 > str
        => "hello" 


        43. dump : Returns a printable version of self, enclosed in double-quotes, with special characters escaped, 
                    and with non-printing characters replaced by hexadecimal notation.

        Example:
        3.2.0 :013 > str
        => "hello" 
        3.2.0 :014 > str.dump
        => "\"hello\""


        44. each_byte {|byte| ...} : Calls the given block with each successive byte from self; returns self.
        
        Example :
        3.0.0 :061 > str.each_byte {|byte| print byte , ' '}
        104 101 108 108 111  => "hello" 


        45. each_char : Calls the given block with each successive character from self; returns self.
        
        Example :
        3.0.0 :062 > str.each_char {|c| print c,' '}
        h e l l o  => "hello"


        46. each_codepoint : Calls the given block with each successive codepoint from self; each codepoint is the integer value for a character; returns self.
        
        Example :
        3.0.0 :063 > str.each_codepoint{|c| print c,' '}
        104 101 108 108 111  => "hello" 


        47. empty? : Returns true if the length of self is zero, false otherwise.
        
        Example : 
        3.0.0 :065 > str.empty?
        => false


        48. encoding : Returns the Encoding object that represents the encoding of obj.
        
        Example :
        3.0.0 :070 > str.encoding
         => #<Encoding:UTF-8> 
        

        49. end_with?(*strings) : Returns whether self ends with any of the given strings

        Example:
        3.2.0 :018 > str
        => "hello" 
        3.2.0 :019 > str.end_with?('o')
        => true 
        3.2.0 :020 > str.end_with?('llo')
        => true 


        50. eql? : Returns true if object has the same length and content; as self; false otherwise.
        
        Example :
        3.0.0 :073 > str="hello"
        => "hello" 
        3.0.0 :074 > str.eql?("Hello")
        => false


        51. force_encoding (encoding) : Changes the encoding of self to encoding, which may be a string encoding name or an Encoding object; returns self.

        Example:
        3.2.0 :021 > str.force_encoding('ascii')
        => "hello" 
        3.2.0 :022 > str
        => "hello" 
        3.2.0 :023 > str.encoding
        => #<Encoding:US-ASCII> 


        52. freeze : To make the string immutable.

        Example:
        3.2.0 :024 > str.freeze
        => "hello" 
        3.2.0 :025 > str[2] = 'A'
        (irb):25:in `[]=': can't modify frozen String: "hello" (FrozenError)
                from (irb):25:in `<main>'                
                from /home/beryl/.rvm/rubies/ruby-3.2.0/lib/ruby/gems/3.2.0/gems/irb-1.6.2/exe/irb:11:in `<top (required)>'              
                from /home/beryl/.rvm/rubies/ruby-3.2.0/bin/irb:31:in `load'
                from /home/beryl/.rvm/rubies/ruby-3.2.0/bin/irb:31:in `<main>'
        

        53. getbyte(index) : Returns the byte at zero-based index as an integer, or nil if index is out of range
        Example :
        3.0.0 :003 > str="Hello"
        => "Hello" 
        3.0.0 :004 > str.getbyte(1)
        => 101


        54. hash : Returns the integer hash value for self. The value is based on the length, content and encoding of self

        Example:
        3.0.0 :001 > str.hash
        => 4208472439367004021


        55. hex : Interprets the leading substring of self as a string of hexadecimal digits (with an optional sign and an optional 0x) and returns the corresponding number; returns zero if there is no such leading substring

        Example:
        3.0.0 :005 > str = '0x0a'
        => "0x0a" 
        3.0.0 :006 > str.hex
        => 10 


        56. include? : Returns true if self contains other_string, false otherwise.

        Example:
        3.0.0 :007 > str.include?('h')
        => false 


        57. index (substring, offset = 0) : Returns the integer index of the first match for the given argument, or nil if none found; the search of self is forward, and begins at position offset (in characters).
        
        Example :
        3.0.0 :001 > str="hello"
        => "hello" 
        3.0.0 :002 > str.index('l')
        => 2


        58. initialize_copy(other_string) : Replaces the contents of self with the contents of other_string. aliased as replace
        
        Example :
        3.0.0 :004 > str.replace('Hii')
        => "Hii"


        59. insert (index,other_string) : Inserts the given other_string into self; returns self.
        
        Example :
        3.0.0 :005 > str
        => "Hii" 
        3.0.0 :006 > str.insert(2," Hello")
        => "Hi Helloi"


        60. inspect : Returns a printable version of self, enclosed in double-quotes, and with special characters escaped.
 
        Example :
        3.0.0 :007 > str.inspect
        => "\"Hi Helloi\""


        61. intern : Returns the Symbol corresponding to str, creating the symbol if it did not previously exist.
        
        Example :
        3.0.0 :008 > str.intern
        => :"Hi Helloi" 
        3.0.0 :009 > "Welcome".intern   # Welcome symbol not exist previously
        => :Welcome 


        62. length : Returns the count of characters (not bytes) in self.

        Example:
        3.0.0 :009 > str = 'hello'
        => "hello" 
        3.0.0 :010 > str.length
        => 5


        63. ljust(size,pad_string=' ') : Returns a left-justified copy of self.

        Example:
        3.0.0 :012 > str.ljust(10)
        => "hello     " 
        3.0.0 :013 > str
        => "hello" 


        64. lstrip : Returns a copy of self with leading whitespace removed.
        
        Example :
        3.0.0 :015 > a
        => "     hello" 
        3.0.0 :016 > a.lstrip
        => "hello"


        65. lstrip! : Any modifications are made in self; returns self if any modification are made, nil otherwise.
        
        Example :
        3.0.0 :017 > str.lstrip!
        => "hello"


        66. next : Returns the successor to self. The successor is calculated by incrementing characters.
        
        Example :
        3.0.0 :019 > str
        => "hello" 
        3.0.0 :020 > str.succ
        => "hellp" 


        67. next! : It modifies self in place; returns self.
        
        Example :
        3.0.0 :021 > str.succ!
        => "hellp" 
        3.0.0 :022 > str
        => "hellp" 


        68. oct : Interprets the leading substring of self as a string of octal digits (with an optional sign) and returns the corresponding number; returns zero if there is no such leading substring.
        
        Example : 
        3.0.0 :024 > '123'.oct
        => 83


        69. ord : Returns the integer ordinal of the first character of self.

        Example:
        3.0.0 :023 > str = '123'
        => "123" 
        3.0.0 :024 > str.ord
        => 49 
        3.0.0 :025 > str.bytes
        => [49, 50, 51] 


        70. partition(string_or_regexp) → [head, match, tail]: Returns a 3-element array of substrings of self

        Example:
        3.0.0 :030 > str = "hellollo"
        => "hellollo" 
        3.0.0 :031 > str.partition('l')
        => ["he", "l", "lollo"] 


        71. prepend (*other_string) : Prepends each string in other_strings to self and returns self.
        
        Example :
        3.0.0 :028 > str="hello"
        => "hello" 
        3.0.0 :029 > str.prepend("Welcome ","John ")
        => "Welcome John hello"

        
        72. reverse : Returns a new string with the characters from self in reverse order.
        
        Example :
        3.0.0 :032 > str
        => "hello" 
        3.0.0 :033 > str.reverse
        => "olleh" 


        73. reverse! : Returns self with its characters reversed.
        
        Example :
        3.0.0 :034 > str
        => "hello" 
        3.0.0 :035 > str.reverse!
        => "olleh"


        74. rjust (size,pad_string=' ') : Returns a right-justified copy of self.
        
        Example :
        3.0.0 :036 > str
        => "olleh" 
        3.0.0 :037 > str.rjust(10)
        => "     olleh" 


        75.  rpartition(sep) → [head, match, tail] 
        
        Example :
        3.0.0 :039 > str="hello"
        => "hello" 
        3.0.0 :040 > str.rpartition('l')
        => ["hel", "l", "o"]


        76. rstrip : Returns a copy of the receiver with trailing whitespace removed.
        
        Example :
        3.0.0 :043 > str="hello\n\v\r"
        => "hello\n\v\r" 
        3.0.0 :044 > str.rstrip
        => "hello"


        77. rstrip! : Returs self and same functionality as rstrip.


        78. scan (string or regex) : Matches a pattern against self.

        Example:
        3.0.0 :036 > str = "hello world hello world"
        => "hello world hello world" 
        3.0.0 :037 > str.scan('hello')
        => ["hello", "hello"]


        79. setbyte(index,integer) : Sets the byte at zero-based index to integer; returns integer.

        Example:
        3.0.0 :038 > str.setbyte(0,96)
        => 96 
        3.0.0 :039 > str
        => "`ello world hello world" 


        80. size : Returns the count of characters (not bytes) in self.
        
        Example :
        3.0.0 :007 > str.size
        => 10


        81. slice (*args) : Returns the substring of self specified by the arguments. 
        
        Example :
        3.0.0 :008 > str.slice(1..5)
        => "un is" 


        82. slice!(*args) : Removes and returns the substring of self specified by the arguments.
                            slice!(index) → new_string or nil
                            slice!(start, length) → new_string or nil
                            slice!(range) → new_string or nil
                            slice!(regexp, capture = 0) → new_string or nil
                            slice!(substring) → new_string or nil 
        
        Example :
        3.0.0 :039 > str
        => "`ello world hello world" 
        3.0.0 :040 > str.slice!(2)
        => "l" 
        3.0.0 :041 > str
        => "`elo world hello world"


        83. squeeze(*selectors) : “Squeezed” means that each multiple-character run of a selected character is squeezed down to a single character.
        
        Example :
        3.0.0 :011 > str="hello john"
        => "hello john" 
        3.0.0 :012 > str.squeeze()
        => "helo john"


        84. squeeze!(*selectors) : Returns self if any changes were made, nil otherwise.


        85. start_with?(*string or regexp) : Returns whether self starts with any of the given string_or_regexp.
        
        Example :
        3.0.0 :013 > str.start_with?("he")
        => false


        86. strip : Returns a copy of the receiver with leading and trailing whitespace removed
        
        Example : 
        3.0.0 :016 > str="\n\rhello\n\r"
        => "\n\rhello\n\r" 
        3.0.0 :017 > str.strip
        => "hello" 


        87. strip! : Modify original string.


        88. sub(pattern | replacement) : Returns a copy of self with only the first occurrence (not all occurrences) of the given pattern replaced.

        Example:
        3.0.0 :045 > str = "hello world"
        => "hello world" 
        3.0.0 :046 > str.sub("hello" , "hi")
        => "hi world" 


        89. sub!(pattern|replacement) : Modify the actual string.

        Example:
        3.0.0 :048 > str.sub!("hello" , "hi")
        => "hi world" 
        3.0.0 :049 > str
        => "hi world" 


        90. sum(n=16) : Returns a basic n-bit checksum of the characters in self; the checksum is the sum of the binary value of each byte in self, modulo 2**n - 1.
        
        Example :
        3.0.0 :049 > str
        => "hi world" 
        3.0.0 :050 > str.sum
        => 793


        91. swapcase(*options) : Returns a string containing the characters in self, with cases reversed; each uppercase character is downcased; each lowercase character is upcased.
        
        Example : 
        3.0.0 :046 > str="HellO"
        => "HellO" 
        3.0.0 :047 > str.swapcase
        => "hELLo"


        92. swapcase!(*options) : Upcases each lowercase character in self; downcases uppercase character; returns self if any changes were made, nil otherwise.


        93. to_c : Returns a complex which denotes the string form.
        
        Example :
        3.0.0 :048 > str="1"
        => "1" 
        3.0.0 :049 > str.to_c
        => (1+0i)


        94. to_f : Returns the result of interpreting leading characters in self as a Float.
        
        Example : 
        3.0.0 :051"> str="201"
        => "201" 
        3.0.0 :052 > str.to_f
        => 201.0


        95. to_i(base=10) : Returns the result of interpreting leading characters in self as an integer in the given base.
        
        Example : 
        3.0.0 :053 > str.to_i
        => 201


        96. to_r : Returns the result of interpreting leading characters in str as a rational.
        
        Example :
        3.0.0 :054 > str.to_r
        => (201/1) 


        97. to_s : Returns self if self is a String, or self converted to a String if self is a subclass of String.
        
        Example : 
        3.0.0 :055 > a=100
        => 100 
        3.0.0 :056 > a.to_s
        => "100" 


        98. tr(selector,replacement) : Returns a copy of self with each character specified by string selector translated to the corresponding character in string replacements.
        Example :
        str.tr("ho" , "ab")
         => "aellb aellb aellb"

        99. tr!(selector,replacement) : Returns self if any changes were made, nil otherwise.

        100. tr_s(selector,replacement) : Like String#tr, but also squeezes the modified portions of the translated string; returns a new string.
        Example : 
        3.2.2 :014 > str
        => "hello" 
        3.2.2 :015 > str.tr_s("el","ip")
        => "hipo"

        101. tr_s(selector,replacement) : Like String#tr_s, but modifies self in place. Returns self if any changes were made, nil otherwise.

        102. undump : Returns an unescaped version of self.
        Example : 
        3.2.2 :020 > str
        => "\"hello\"" 
        3.2.2 :022 > s.undump
        => "hello"

        103. upcase (*options) : Returns a string containing the upcased characters in self.
        Example : 
        3.2.2 :023 > str
        => "hello" 
        3.2.2 :024 > str.upcase
        => "HELLO"

        104. upcase!(*options) : Upcases the characters in self; returns self if any changes were made, nil otherwise.
        Example :
        3.2.2 :025 > str.upcase!
        => "HELLO"

        105. upto(other_string,exclusive =false){|string|...} : It calls the block with each string value returned by successive calls.
        Example:
        str.upto('c1'){|s| print s , ','}
        a8,a9,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,c0,c1, => "a8"  

        106. valid_encoding? : Returns true if self is encoded correctly, false otherwise.
        Example : 
        3.2.2 :029 > str.valid_encoding?
         => true

        107. gsub(pattern, replacement) → new_string
            gsub(pattern) {|match| ... } → new_string
            gsub(pattern) → enumerator : Returns a copy of self with all occurrences of the given pattern replaced
        Example:
        3.0.0 :069 > str = "this is my name Avneet"
        => "this is my name Avneet" 
        3.0.0 :070 > str.gsub("Avneet","Singh")
        => "this is my name Singh" 
        3.0.0 :071 > str.gsub("i" , "I")
        => "thIs Is my name Avneet"

        108. gsub! : Performs the specified substring replacement(s) on self; returns self if any replacement occurred, nil otherwise.



    ARRAY 
        - An Array is an ordered, integer-indexed collection of objects, called elements. Any object (even another array) may be an array element, 
          and an array can contain objects of different types.
        
        - Creation:
        First way:
        3.0.0 :007 > arr2 = Array.new(3)
        => [nil, nil, nil] 
        3.0.0 :008 > arr2
        => [nil, nil, nil]

        Second way:
        3.0.0 :013 > array = [1,2,3,4,5]

        - length : To find the length of array.
        Example:
        3.0.0 :013 > arr2.length
         => 6

        - Accessing array elements : using [] method
        Example:
        3.0.0 :014 > arr
        => [1, 2, 3, 4, 5, 7] 
        3.0.0 :015 > arr[3]
        => 4 

        - at method : To access a particular element, at method can also be used.
        Syntax : <arr-name>.at(index)

        - fetch method : The fetch method is used to provide a default value error for out of array range indices.
        Syntax : <arr-name>.fetch(numbers,"default value")

        - Adding items in array : 
            - push or <<  -> at the end of an array
            - unshift  -> front of array
            - insert -> at particular index (it adds the element and shift elements rather than replacing the element)
            - we can add multiple elements at a time too.

            Example:
            3.0.0 :016 > arr
            => [1, 2, 3, 4, 5, 7] 
            3.0.0 :017 > arr.push(10)
            => [1, 2, 3, 4, 5, 7, 10] 
            3.0.0 :018 > arr.insert(1,11)
            => [1, 11, 2, 3, 4, 5, 7, 10] 
            3.0.0 :019 > arr.unshift(2)
            => [2, 1, 11, 2, 3, 4, 5, 7, 10] 

        - Remove items from array : To remove elements from an array.
            - pop -> from end of an array
            - shift   -> From start of an array
            - delete  -> Delete from anywhere in an array.

            Example: 
            => [2, 1, 11, 2, 3, 4, 5, 7, 10] 
            3.0.0 :020 > arr.delete(11)
            => 11 
            3.0.0 :021 > arr
            => [2, 1, 2, 3, 4, 5, 7, 10]

        Public Class Methods Of Arrays

        1. ::[](*args) : Returns a new array populated with the given objects.
        Example :
        3.2.2 :001 > arr=[1,2,3]
        => [1, 2, 3] 

        2. ::new → new_empty_array
            new(array) → new_array
            new(size) → new_array
            new(size, default_value) → new_array
            new(size) {|index| ... } → new_array 
            It returns a new array.
        Example :
        3.2.2 :004 > arr=Array.new([1,2,3])
        => [1, 2, 3] 

        3. ::try_convert(object) : If object is an Array object, returns object.
                                Otherwise if object responds to :to_ary, calls object.to_ary and returns the result.
        Example : 
        3.2.2 :014 > Array.try_convert(arr)
        => [1, 2, 3] 

        Public Instance Methods of Arrays

        4. array & other_array : Returns a new Array containing each element found in both array and Array other_array; duplicates are omitted; items are compared using eql?
        Example:
        3.2.0 :001 > arr = [1,2,3,4]
        => [1, 2, 3, 4] 
        3.2.0 :002 > arr2 = [3,4,5,6]
        => [3, 4, 5, 6] 
        3.2.0 :003 > arr & arr2
        => [3, 4]

        5. array * n : When non-negative argument Integer n is given, returns a new Array built by concatenating the n copies of self
        Example :
        3.2.2 :022 > arr
        => [1, 2, 3] 
        3.2.2 :023 > arr * 3
        => [1, 2, 3, 1, 2, 3, 1, 2, 3] 

        6. array + other_array : Returns a new Array containing all elements of array followed by all elements of other_array
        Example :
        3.2.2 :028 > arr
        => [1, 2, 3] 
        3.2.2 :029 > other_arr
        => [3, 4, 5] 
        3.2.2 :030 > arr + other_arr
        => [1, 2, 3, 3, 4, 5]

        7. array - other_array : Returns a new Array containing only those elements from array that are not found in Array other_array.
        Example:
        3.2.0 :006 > arr
        => [1, 2, 3, 4] 
        3.2.0 :007 > arr2
        => [3, 4, 5, 6] 
        3.2.0 :008 > arr-arr2
        => [1, 2] 
        3.2.0 :009 > arr2-arr
        => [5, 6]

        8. <=>: array <=> other_array : Returns -1, 0, or 1 as self is less than, equal to, or greater than other_array. For each index i in self, evaluates result = self[i] <=> other_array[i].
        Example:
        3.2.0 :012 > arr
        => [1, 2, 3, 4] 
        3.2.0 :013 > arr2
        => [3, 4, 5, 6, 7, 8] 
        3.2.0 :014 > arr2<=>arr
        => 1

        9. array == other_array : Returns true if both array.size == other_array.size and for each index i in array, array[i] == other_array[i]
        Example :
        3.2.0 :015 > arr == arr2
        => false

        10. array[index] → object or nil
            array[start, length] → object or nil
            array[range] → object or nil 
        Example:
        3.2.0 :017 > arr2[1..5]
        => [4, 5, 6, 7, 8]

        11. array[index]=object : Assigns elements in self; returns the given object.
            array[index] = object → object
            array[start, length] = object → object
            array[range] = object → object
        Example:
        3.2.0 :020 > arr
        => [1, 2, 3, 4] 
        3.2.0 :021 > arr[0] = "hi"
        => "hi" 
        3.2.0 :022 > arr
        => ["hi", 2, 3, 4] 
        3.2.0 :023 > arr[1..2] = 'Hello'
        => "Hello" 
        3.2.0 :024 > arr
        => ["hi", "Hello", 4]

        12. all? → true or false
            all? {|element| ... } → true or false
            all?(obj) → true or false: Returns true if all elements of self meet a given criterion.
        Example :
        3.2.2 :051 > arr.all?
        => true 
        3.2.2 :052 > arr=[0,nil,2.0]
        => [0, nil, 2.0] 
        3.2.2 :053 > arr.all?
        => false

        13. any? → true or false
            any? {|element| ... } → true or false
            any?(obj) → true or false: Returns true if any element of self meets a given criterion.
        Example :
        3.2.2 :054 > [nil,0,false].any?
        => true 
        3.2.2 :055 > [nil,false].any?
        => false

        14. append(*args) or push : Appends the elements in the end of an array.
        Example : 
        3.2.2 :056 > arr
        => [0, nil, 2.0] 
        3.2.2 :057 > arr.append(5)
        => [0, nil, 2.0, 5]